import streamlit as st
import requests
import matplotlib.pyplot as plt
from collections import Counter

st.set_page_config(page_title="LifeHUB", page_icon="üíô")

if "history" not in st.session_state:
    st.session_state.history = []

API_URL = "https://api-inference.huggingface.co/models/HuggingFaceH4/zephyr-7b-alpha"
HEADERS = {"Authorization": "Bearer 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"}

EMOJI_MAP = {
    "anxiety": "üòü",
    "sadness": "üò¢",
    "apathy": "üòê",
    "panic": "üò∞",
    "anger": "üò†",
    "loneliness": "üòî",
    "joy": "üòä",
    "love": "‚ù§Ô∏è",
    "hope": "üåà",
    "fear": "üò®"
}

def query_huggingface(prompt):
    response = requests.post(API_URL, headers=HEADERS, json={"inputs": prompt})
    if response.status_code == 200:
        try:
            return response.json()[0]["generated_text"].strip().lower()
        except:
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞."
    else:
        return "–û—à–∏–±–∫–∞ API –∏–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω."

tab = st.sidebar.radio("–ù–∞–≤–∏–≥–∞—Ü–∏—è", ["–≠–º–æ—Ü–∏–∏", "–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "–ò—Å—Ç–æ—Ä–∏—è"])

if tab == "–≠–º–æ—Ü–∏–∏":
    st.title("LifeHUB ‚Äî –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
    st.markdown("–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å?")
    user_input = st.text_area("–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å...")

    if st.button("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å", key="emotion"):
        with st.spinner("–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–≤–æ—é —ç–º–æ—Ü–∏—é..."):
            detect_prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —ç–º–æ—Ü–∏—é —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: '{user_input}'. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."
            emotion = query_huggingface(detect_prompt)
            emoji = EMOJI_MAP.get(emotion, "üîç")
            st.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: **{emotion.capitalize()}** {emoji}")

            full_prompt = f"–ß–µ–ª–æ–≤–µ–∫ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç {emotion}. –û–Ω –æ–ø–∏—Å–∞–ª —ç—Ç–æ —Ç–∞–∫: {user_input}. –û—Ç–≤–µ—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ —ç–º–ø–∞—Ç–∏–µ–π."
            answer = query_huggingface(full_prompt)

            st.session_state.history.append(("–≠–º–æ—Ü–∏–∏", user_input, answer, emotion))

            st.success(answer)

elif tab == "–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è":
    st.title("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    emotion_list = [e for (_, _, _, e) in st.session_state.history if e]

    if emotion_list:
        counts = Counter(emotion_list)
        labels = [f"{EMOJI_MAP.get(e, '')} {e.capitalize()}" for e in counts.keys()]
        values = list(counts.values())

        fig, ax = plt.subplots()
        ax.bar(labels, values)
        ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
        ax.set_title("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
        st.pyplot(fig)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

elif tab == "–ò—Å—Ç–æ—Ä–∏—è":
    st.title("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
    if st.session_state.history:
        for idx, (topic, q, a, emotion) in enumerate(reversed(st.session_state.history[-20:]), 1):
            emoji = EMOJI_MAP.get(emotion, "")
            st.markdown(f"**{idx}. [{topic}]** {emoji}")
            st.markdown(f"**–¢—ã:** {q}")
            st.markdown(f"**LifeHUB:** {a}")
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.history.clear()
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
